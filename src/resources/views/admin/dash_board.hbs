<!DOCTYPE html>
<html lang="en">
<head>
    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/src/public/css/dashboard_admin.css">
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    
</head>
<body>
    <div class="container">
        <div class="top d-flex ">
            <span class="curent_page">Dashboard</span>
            <div class="search-container">
                <div class="input-wrapper">
                    <img src="/src/public/img/Search.svg" alt="Search" class="search-icon"> 
                    <input type="text" class="search-input" placeholder="Search">
                </div>
                <img src="/src/public/img/Avatar.png" alt="User" class="user-avatar"> 
            </div>
        </div>
        <div class="stastic d-flex justify-content-between">
            <div class="sta d-flex">
                <img src="/src/public/img/Stastic.svg" alt="">
                    <div class="d-flex flex-column">
                        Employers
                        <span class="number">1234</span>
                    </div>
            </div>
            <div class="sta d-flex">
                <img src="/src/public/img/Stastic-1.svg" alt="">
                <div class="d-flex flex-column">
                    Job Seekers
                    <span class="number">2345</span>
                </div>
            </div>
            <div class="sta d-flex">

                <img src="/src/public/img/Stastic-2.svg" alt="">
                <div class="d-flex flex-column">
                    Job Posting
                    <span class="number">1234</span>
                </div>
            </div>
            <div class="sta d-flex">
                <img src="/src/public/img/Stastic-3.svg" alt="">
                <div class="d-flex flex-column">
                    New Registration
                    <span class="number">1234</span>
                </div>
            </div>
        </div>
        <div class="line-2 d-flex mt-3">
            <div class="card flex-fill">
                <h2>Employment Insights</h2>
                <div class="pulse"></div>
                <div class="chart-area">
                    <div class="grid"></div>
                </div>
            </div>
        <div class="container-cal flex-fill">
            <div class="content-cal">
                <header>
                    <p class="current-date"></p>
                    <div class="icons">
                        <button><img src="/src/public/img/Chevron Left.svg" alt=""></button>
                        <button><img src="/src/public/img/Chevron Right.svg" alt=""></button>
                    </div>
                </header>
                <div class="calendar">
                    <ul class="weeks">
                        <li>Sun</li>
                        <li>Mon</li>
                        <li>Tue</li>
                        <li>Wed</li>
                        <li>Thu</li>
                        <li>Fri</li>
                        <li>Sat</li>
                    </ul>
                    <ul class="days">
                        
                    </ul>
                </div>
            </div>
        </div>
        </div>
        
        
    </div>
    <script>

        let primaryColor = getComputedStyle(document.documentElement)
        .getPropertyValue("--color-primary")
        .trim();

        let secondaryColor = getComputedStyle(document.documentElement)
        .getPropertyValue("--color-secondary")
        .trim();

        let labelColor = getComputedStyle(document.documentElement)
        .getPropertyValue("--color-label")
        .trim();

        let bgColor = getComputedStyle(document.documentElement)
        .getPropertyValue("--color-bg")
        .trim();

        let fontFamily = getComputedStyle(document.documentElement)
        .getPropertyValue("--font-family")
        .trim();

        let defaultOptions = {
        chart: {
            tollbar: {
            show: false,
            },
            zoom: {
            enabled: false,
            },
            width: "100%",
            height: 180,
            offsetY: 18,
        },

        dataLabels: {
            enabled: false,
        },
        };

        let barOptions = {
            ...defaultOptions,

            chart: {
                ...defaultOptions.chart,
                type: "area",
                background: bgColor,
            },
            legend: {
                offsetY: 5, 
                style: {
                    fontFamily: fontFamily,
                },
            },

            tooltip: {
                enabled: true,
                style: {
                    fontFamily: fontFamily,
                    borderColor: primaryColor,
                },
                y: {
                    formatter: (value) => `${value}k`,
                },
            },

            series: [
                {
                    name: "New Jobs",
                    data: [450, 600, 650, 1000, 420, 800,450, 600, 650, 1000, 420, 800],
                },
                {
                    name: "Applications",
                    data: [150, 300, 280, 600, 100, 500,150, 300, 280, 600, 100, 500],
                }
            ],

            colors: [primaryColor, secondaryColor], // Colors for the series lines

            fill: {
                type: "gradient",
                gradient: {
                    type: "vertical",
                    opacityFrom: 1,
                    opacityTo: 0,
                    stops: [0, 100],
                    colorStops: [
                        {
                            offset: 0,
                            opacity: 0.2,
                            color: primaryColor,
                        },
                        {
                            offset: 100,
                            opacity: 0,
                            color: "#ffffff",
                        },
                    ],
                },
            },

            stroke: {
                colors: [primaryColor, secondaryColor], // This should match the series colors if you want different strokes for each series
                lineCap: "round",
            },

            grid: {
                borderColor: "rgba(0, 0, 0, 0)",
                padding: {
                    top: -30,
                    right: 0,
                    bottom: 5,
                    left: 12,
                },
            },

            markers: {
                strokeColors: [primaryColor, secondaryColor], // Assuming you want different colors for markers of each series
            },

            yaxis: {
                labels: {
                    show: false,
                    floating: true,
                    style: {
                        colors: labelColor,
                        fontFamily: fontFamily,
                    },
                },

                axisBorder: {
                    show: false,
                },

                crosshairs: {
                    show: false,
                },
                categories: ["0", "500", "1000"],
            },

            xaxis: {
                labels: {
                    show: true,
                    floating: true,
                    style: {
                        colors: labelColor,
                        fontFamily: fontFamily,
                    },
                },

                axisBorder: {
                    show: false,
                },

                crosshairs: {
                    show: false,
                },

                categories: ["Jan","Feb","Mar","Apr","May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"],
            },
        };

        let chart = new ApexCharts(document.querySelector(".chart-area"), barOptions);

        chart.render();

        const currentDate = document.querySelector(".current-date"),
    days = document.querySelector(".days"),
icons = document.querySelectorAll(".icons span")

let date = new Date()
let currentYear = date.getFullYear()
let currentMonth = date.getMonth()
const month = ["January", "February", "March","April","May", "June", "July", "August", "September", 'October', "November", "December"]
const renderCalandar = () => {
    let lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0).getDate(),
    lastDayOfLastMonth = new Date(currentYear, currentMonth , 0).getDate(),
    lastDay_OfMonth = new Date(currentYear, currentMonth , lastDayOfMonth).getDay(),
    firstDayOfMonth = new Date(currentYear, currentMonth , 1).getDay()
    let lists = ""
    for (let i = firstDayOfMonth; i > 0; i--){
        lists += `<li class="inactive">${lastDayOfLastMonth-i+1}</li>`
    }
    for (let i = 1; i <= lastDayOfMonth; i++){
        let isDay = i ===date.getDate() && currentMonth == new Date().getMonth() && currentYear === new Date().getFullYear() ? "active":""
        lists += `<li class="${isDay}">${i}</li>`
    }
    for (let i = lastDay_OfMonth ; i < 6; i++){
        lists += `<li class="inactive">${i - lastDay_OfMonth + 1}</li>`
    }
    currentDate.innerHTML = `${month[currentMonth]} ${currentYear}`
    days.innerHTML = lists
}
renderCalandar()
icons.forEach((icon) => {
    icon.addEventListener("click", () => {
        if (icon.id === 'prev') {
            currentMonth = currentMonth - 1
        } else {
            currentMonth = currentMonth + 1
        }
        if (currentMonth < 0 || currentMonth > 11) {
            date = new Date(currentYear, currentMonth)
            currentYear = date.getFullYear()
            currentMonth = date.getMonth()
        } else {
            date = new Date()
        }
        renderCalandar()
    })
})

        
    </script>
    
</body>